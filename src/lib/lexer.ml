# 20 "src/lib/lexer.mll"
 
  open Format
  open Lexing
  open Parser

  type grid = char * bool array array

  let lines = ref []

  let line_buffer = Buffer.create 1024
  let string_buffer = Buffer.create 1024

  let bool_array_of_string s =
    Array.init (String.length s) (fun i -> s.[i] = '*')

  let push_line () =
    let s = Buffer.contents line_buffer in
    Buffer.clear line_buffer;
    if s <> "" then lines := bool_array_of_string s :: !lines

  let create_bool_array () =
    let w = List.fold_left (fun w a -> max w (Array.length a)) 0 !lines in
    let m = Array.of_list !lines in
    lines := [];
    let adapt a =
      let n = Array.length a in
      if n = w then a else Array.init w
        (fun i -> if i < n then a.(i) else false)
    in
    Array.map adapt m

  exception Lexical_error of string

  let ident_of_keyword =
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
[ "pattern",    PATTERN;
  "tiles",      TILES;
  "pattern3",   PATTERN3;
  "tiles3",     TILES3;
  "problem",    PROBLEM;
  "problem3",   PROBLEM3;
  "false",      FALSE;
  "true",       TRUE;
  "constant",   CONSTANT;
  "assert",     ASSERT;
  "print",      PRINT;
  "svg",        SVG_OUT;
  "ascii",      ASCII_OUT;
  "solve",      SOLVE;
  "solve3",     SOLVE3;
  "count",      COUNT;
  "count3",     COUNT3;
  "dimacs",     DIMACS;
  "include",    INCLUDE;
  "exit",       EXIT;
  "sat",        SAT;
  "dlx",        DLX;
  "answer_to_the_question_of_life_the_universe_and_everything", H2G2;
  "zdd",        ZDD;
  "debug",      DEBUG;
  "timing",     TIMING;
  "on",         ON;
  "off",        OFF;
  "diff",       DIFF;
  "union",      UNION;
  "inter",      INTER;
  "xor",        XOR;
  "set",        SET;
  "shift",      SHIFT;
  "resize",     RESIZE;
  "crop",       CROP;
  "apply",      APPLY;
  "Id",         ID;
  "Rot90",      ROT90;
  "Rot180",     ROT180;
  "Rot270",     ROT270;
  "VertRefl",   VERTREFL;
  "HorizRefl",  HORIZREFL;
  "Diag1Refl",  DIAG1REFL;
  "Diag2Refl",  DIAG2REFL;
  "all",        ALL;
  "all3",       ALL3;
      ];
    fun s -> try Hashtbl.find h s with Not_found -> IDENT s


# 90 "src/lib/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\232\255\233\255\004\000\236\255\237\255\238\255\239\255\
    \240\255\241\255\079\000\028\000\247\255\103\000\249\255\001\000\
    \001\000\252\255\253\255\010\000\001\000\255\255\002\000\251\255\
    \250\255\027\000\019\000\044\000\034\000\044\000\246\255\025\000\
    \049\000\047\000\245\255\040\000\244\255\034\000\243\255\178\000\
    \188\000\198\000\234\255\250\000\250\255\251\255\252\255\253\255\
    \254\255\005\000\011\000\006\000\253\000\250\255\251\255\003\000\
    \254\255\255\255\252\255\253\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\020\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\022\000\022\000\255\255\007\000\255\255\022\000\
    \022\000\255\255\255\255\001\000\022\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\013\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\004\000\000\000\255\255\255\255\255\255\255\255\004\000\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\002\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\255\255\000\000\255\255\
    \255\255\000\000\000\000\255\255\022\000\000\000\022\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\255\255\000\000\255\255\000\000\255\255\
    \255\255\255\255\000\000\045\000\000\000\000\000\000\000\000\000\
    \000\000\051\000\255\255\051\000\054\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\019\000\018\000\021\000\021\000\003\000\042\000\048\000\
    \048\000\000\000\000\000\019\000\050\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \019\000\000\000\012\000\020\000\003\000\059\000\016\000\023\000\
    \005\000\004\000\019\000\050\000\006\000\017\000\000\000\000\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\000\000\000\000\000\000\009\000\000\000\000\000\
    \000\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\008\000\000\000\007\000\014\000\058\000\
    \000\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\003\000\015\000\024\000\011\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\027\000\037\000\028\000\035\000\031\000\025\000\026\000\
    \029\000\030\000\032\000\033\000\034\000\036\000\038\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\000\000\000\000\000\000\000\000\013\000\039\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \001\000\255\255\255\255\050\000\048\000\255\255\255\255\056\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\050\000\000\000\000\000\049\000\047\000\057\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\039\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\044\000\000\000\000\000\053\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\020\000\022\000\003\000\003\000\049\000\
    \051\000\255\255\255\255\019\000\050\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\003\000\055\000\000\000\016\000\
    \000\000\000\000\019\000\050\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\000\000\055\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\015\000\000\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\011\000\025\000\011\000\026\000\027\000\011\000\011\000\
    \028\000\029\000\031\000\032\000\033\000\035\000\037\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\255\255\255\255\255\255\255\255\013\000\010\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\041\000\041\000\
    \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
    \000\000\020\000\022\000\043\000\043\000\049\000\051\000\052\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\043\000\255\255\255\255\043\000\043\000\052\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\040\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\052\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\043\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\043\000\255\255\255\255\052\000";
  Lexing.lex_base_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_backtrk_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_default_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_trans_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check_code = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_code = 
   "\255\001\255\255\000\001\255";
}

let rec token lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 2 (-1) ;   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 121 "src/lib/lexer.mll"
      ( new_line lexbuf; token lexbuf )
# 359 "src/lib/lexer.ml"

  | 1 ->
# 123 "src/lib/lexer.mll"
      ( token lexbuf )
# 364 "src/lib/lexer.ml"

  | 2 ->
# 125 "src/lib/lexer.mll"
      ( new_line lexbuf; token lexbuf )
# 369 "src/lib/lexer.ml"

  | 3 ->
# 127 "src/lib/lexer.mll"
      ( MINUS )
# 374 "src/lib/lexer.ml"

  | 4 ->
# 129 "src/lib/lexer.mll"
      ( AMPAMP )
# 379 "src/lib/lexer.ml"

  | 5 ->
# 131 "src/lib/lexer.mll"
      ( BARBAR )
# 384 "src/lib/lexer.ml"

  | 6 ->
# 133 "src/lib/lexer.mll"
      ( HAT )
# 389 "src/lib/lexer.ml"

  | 7 ->
let
# 134 "src/lib/lexer.mll"
             id
# 395 "src/lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 135 "src/lib/lexer.mll"
      ( ident_of_keyword id )
# 399 "src/lib/lexer.ml"

  | 8 ->
# 137 "src/lib/lexer.mll"
      ( let s = string lexbuf in STRING s)
# 404 "src/lib/lexer.ml"

  | 9 ->
# 139 "src/lib/lexer.mll"
      ( ONE )
# 409 "src/lib/lexer.ml"

  | 10 ->
# 141 "src/lib/lexer.mll"
      ( MAYBE )
# 414 "src/lib/lexer.ml"

  | 11 ->
# 143 "src/lib/lexer.mll"
      ( SYM )
# 419 "src/lib/lexer.ml"

  | 12 ->
# 145 "src/lib/lexer.mll"
      ( ROT )
# 424 "src/lib/lexer.ml"

  | 13 ->
let
# 146 "src/lib/lexer.mll"
                w
# 430 "src/lib/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0)
and
# 146 "src/lib/lexer.mll"
                                   h
# 435 "src/lib/lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_mem.(0) + 1) lexbuf.Lexing.lex_curr_pos in
# 147 "src/lib/lexer.mll"
      ( DIM (int_of_string w, int_of_string h) )
# 439 "src/lib/lexer.ml"

  | 14 ->
# 149 "src/lib/lexer.mll"
      ( EQUAL )
# 444 "src/lib/lexer.ml"

  | 15 ->
# 151 "src/lib/lexer.mll"
      ( LSBRA )
# 449 "src/lib/lexer.ml"

  | 16 ->
# 153 "src/lib/lexer.mll"
      ( RSBRA )
# 454 "src/lib/lexer.ml"

  | 17 ->
# 155 "src/lib/lexer.mll"
      ( COMMA )
# 459 "src/lib/lexer.ml"

  | 18 ->
# 157 "src/lib/lexer.mll"
      ( LPAR )
# 464 "src/lib/lexer.ml"

  | 19 ->
# 159 "src/lib/lexer.mll"
      ( RPAR )
# 469 "src/lib/lexer.ml"

  | 20 ->
# 161 "src/lib/lexer.mll"
      ( read_lines lexbuf )
# 474 "src/lib/lexer.ml"

  | 21 ->
# 163 "src/lib/lexer.mll"
      ( new_line lexbuf; read_lines lexbuf )
# 479 "src/lib/lexer.ml"

  | 22 ->
let
# 164 "src/lib/lexer.mll"
         c
# 485 "src/lib/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 165 "src/lib/lexer.mll"
      ( raise (Lexical_error (sprintf "invalid character `%c'@." c)) )
# 489 "src/lib/lexer.ml"

  | 23 ->
# 167 "src/lib/lexer.mll"
      ( EOF )
# 494 "src/lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and read_lines lexbuf =
    __ocaml_lex_read_lines_rec lexbuf 43
and __ocaml_lex_read_lines_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 171 "src/lib/lexer.mll"
      ( read_lines lexbuf )
# 506 "src/lib/lexer.ml"

  | 1 ->
# 173 "src/lib/lexer.mll"
      ( new_line lexbuf; push_line (); read_lines lexbuf )
# 511 "src/lib/lexer.ml"

  | 2 ->
# 175 "src/lib/lexer.mll"
      ( push_line (); read_lines lexbuf )
# 516 "src/lib/lexer.ml"

  | 3 ->
# 177 "src/lib/lexer.mll"
    ( push_line (); ASCII (create_bool_array ()) )
# 521 "src/lib/lexer.ml"

  | 4 ->
let
# 178 "src/lib/lexer.mll"
         c
# 527 "src/lib/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 179 "src/lib/lexer.mll"
      ( Buffer.add_char line_buffer c; read_lines lexbuf )
# 531 "src/lib/lexer.ml"

  | 5 ->
# 181 "src/lib/lexer.mll"
      ( raise (Lexical_error "unterminated pattern") )
# 536 "src/lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_read_lines_rec lexbuf __ocaml_lex_state

and string lexbuf =
    __ocaml_lex_string_rec lexbuf 52
and __ocaml_lex_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 185 "src/lib/lexer.mll"
      ( let s = Buffer.contents string_buffer in
        Buffer.clear string_buffer;
        s )
# 550 "src/lib/lexer.ml"

  | 1 ->
# 189 "src/lib/lexer.mll"
      ( new_line lexbuf;
        Buffer.add_char string_buffer '\n';
        string lexbuf )
# 557 "src/lib/lexer.ml"

  | 2 ->
# 193 "src/lib/lexer.mll"
      ( Buffer.add_char string_buffer '"';
        string lexbuf )
# 563 "src/lib/lexer.ml"

  | 3 ->
# 196 "src/lib/lexer.mll"
      ( Buffer.add_char string_buffer '\\';
        string lexbuf )
# 569 "src/lib/lexer.ml"

  | 4 ->
let
# 198 "src/lib/lexer.mll"
         c
# 575 "src/lib/lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 199 "src/lib/lexer.mll"
      ( Buffer.add_char string_buffer c;
        string lexbuf )
# 580 "src/lib/lexer.ml"

  | 5 ->
# 202 "src/lib/lexer.mll"
      ( raise (Lexical_error "unterminated string") )
# 585 "src/lib/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_string_rec lexbuf __ocaml_lex_state

;;

# 205 "src/lib/lexer.mll"
 

  let print_loc fmt lb =
    let pos = lexeme_start_p lb in
    let c = (pos.pos_cnum - pos.pos_bol) in
    fprintf fmt "File \"%s\", line %d, characters %d-%d:" pos.pos_fname
      pos.pos_lnum c c

  let parse_file fname =
    let c = open_in fname in
    let lb = from_channel c in
    lb.lex_curr_p <- { lb.lex_curr_p with pos_fname = fname };
    let p =
      try
	Parser.queue token lb
      with
	| Lexical_error msg ->
  	  eprintf "%a@\nlexical error: %s@." print_loc lb msg;
  	  exit 1
	| Parser.Error ->
	  eprintf "%a@\nsyntax error@." print_loc lb;
	  exit 1
    in
    close_in c;
    p

  let parse_string efmt s =
    let lb = from_string s in
    lb.lex_curr_p <- { lb.lex_curr_p with pos_fname = "current channel" };
    let p =
      try
	Parser.queue token lb
      with
      | Lexical_error msg ->
  	fprintf efmt "%a@\nlexical error: %s@." print_loc lb msg;
  	exit 1
      | Parser.Error ->
	fprintf efmt "%a@\nsyntax error@." print_loc lb;
	exit 1
    in
    p


(***
  let raw_parser c =
    let lb = from_channel c in
    read lb

  let read_problem c =
    let pl = raw_parser c in
    if List.length pl <= 1 then invalid_arg "read_problem";
    let grid = ref None in
    let pieces = ref [] in
    let add (c, g) =
      if c = '$' then
        grid := Some g
      else
      	pieces := Tiling.create_piece ~n:(String.make 1 c) g :: !pieces
    in
    List.iter add pl;
    match !grid with
      | None -> invalid_arg "read_problem"
      | Some g -> Tiling.create_problem g !pieces
***)



# 660 "src/lib/lexer.ml"
