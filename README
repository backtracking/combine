##########################################################################
#                                                                        #
#  Copyright (C) 2012                                                    #
#    Remy El Sibaie                                                      #
#    Jean-Christophe Filliatre                                           #
#                                                                        #
#  This software is free software; you can redistribute it and/or        #
#  modify it under the terms of the GNU Library General Public           #
#  License version 2.1, with the special exception on linking            #
#  described in file LICENSE.                                            #
#                                                                        #
#  This software is distributed in the hope that it will be useful,      #
#  but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  #
#                                                                        #
##########################################################################

Reml is an OCaml library for combinatorics.


* library

  ocamlc -I +reml reml.cma <other files>


* examples

  - queens.ml

  - sudoku.ml

  - tests/*.rem


* tiling language and interpreter

<decl> ::=
			| pattern <identifier> = <expr>
			| tiles <identifier> = <tile_list>
			| problem <identifier>  equal <expr> tl = tiles
			| assert b = boolean_expr
			| print <identifier>
			| solve a = algo <identifier>  out = output
			| count a = algo <identifier>
			| debug st = state
			| timing st = state
			| exit
			| include <string>

algo ::=
			| dlx
			| zdd

state ::=
			| on
			| off

option ::=
			| one
			| maybe
			| sym
			| rot

tiles ::=
			| <tile_list>
			| <identifier>

tile_list ::=
			| <lsbra> l = separated_list(comma, tile) <rsbra>

output ::=
			| svg_out <string>
			| ascii_out

isometry ::=
			| id
			| rot90
			| rot180
			| rot270
			| vertrefl
			| horizrefl
			| diag1refl
			| diag2refl

tile ::=
			| <expr> o = list(option)

expr ::=
			| lpar <expr> rpar
			| <identifier>
			| constant <dim> <bool>
			| union <expr> <expr>
			| inter <expr> <expr>
			| diff <expr> <expr>
			| xor <expr> <expr>
			| <expr> minus <expr>
			| <expr> ampamp <expr>
			| <expr> barbar <expr>
			| <expr> hat <expr>
			| set <expr> <dim> <bool>
			| crop <dim> <dim> <expr>
			| shift <expr> <dim>
			| resize <expr> <dim>
			| apply <isometry> <expr>
			| <ascii>

bool ::=
			| false
			| true

boolean_expr::=
			| <bool>
			| <expr> equal <expr>






